<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:component-scan base-package="cn.edu.tju.scs.fm.web" />

    <!-- 开启注解 --><!--添加注解的目的可以使JSON 字符串自动转换成实体类-->
    <mvc:annotation-driven />

    <!--&lt;!&ndash;默认的静态资源的访问（.js .CSS .png），不会被springMVC 框架直接处理,而是递交给了原始的web 容器 tomcat,采用默认的方式处理&ndash;&gt;-->
    <!--<mvc:default-servlet-handler />-->

    <mvc:resources location="/WEB-INF/js/" mapping="/js/**" />
    <mvc:resources location="/WEB-INF/img/" mapping="/image/**" />
    <mvc:resources location="/WEB-INF/css/" mapping="/css/**" />




    <!-- 处理JSON数据转换的 -->
    <!--<bean id="mappingJacksonHttpMessageConverter"-->
    <!--class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
    <!--&lt;!&ndash; 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 &ndash;&gt;-->
    <!--<property name="supportedMediaTypes">-->
    <!--<list>-->
    <!--<value>application/json;charset=UTF-8</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>



     <!--异常处理器 -->
    <!--<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
        <!--<property name="exceptionMappings">-->
            <!--<props>-->
                <!--<prop key="java.lang.Exception">Exception</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="cn.edu.tju.scs.fm.interceptor.LoginInterceptor">
            <property name="excludedUrls">
                <list>
                    <value>/login</value>
                    <value>/preLogin</value>
                    <value>/logout</value>
                    <value>.jpg</value>
                    <value>.css</value>
                    <value>.js</value>
                    <value>.woff</value>
                    <value>.woff2</value>
                    <value>.ttf</value>
                </list>
            </property>
        </bean>
        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
        <!--&lt;!&ndash;<bean class="cn.edu.tju.scs.bank.interceptor.LoginInterceptor"></bean>&ndash;&gt;-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 拦截所有URL中包含/user/的请求 &ndash;&gt;-->
            <!--<mvc:mapping path="/*"/>-->
            <!---->
        <!--</mvc:interceptor>-->
    </mvc:interceptors>

</beans>